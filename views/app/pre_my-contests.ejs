<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="theme-color" content="#1e2750" />

    <meta
      name="description"
      content="Join Vibrer's prelaunch and be the first to experience a revolutionary music platform. Connect, discover, and engage with artists and music enthusiasts worldwide."
    />
    <meta
      name="keywords"
      content="music platform, music community, music discovery, artist connection, music enthusiasts"
    />
    <%- include('../partials/head'); %>
    <link
      href="https://cdn.quilljs.com/1.3.6/quill.snow.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/public/style/modal.css" />
    <link rel="stylesheet" href="/public/style/app.css" />
    <link rel="stylesheet" href="/public/style/contests.css" />
    <link href="https://vjs.zencdn.net/8.6.1/video-js.css" rel="stylesheet" />
  </head>
  <body class="body-dark _pr">
    <!-- loader -->
    <%- include('../partials/loader'); %>

    <!-- header -->
    <header class="app_header">
      <nav class="app_layout">
        <div class="app_start_menu">
          <!-- Logo -->
          <% if (path !== '/home') { %>
          <div class="logo" onclick="toPreHome('<%= path %>')">
            <img src="/public/images/vibrer_icon.svg" alt="Logo" />
          </div>
          <% } else { %>
          <div class="logo">
            <img src="/public/images/vibrer_icon.svg" alt="Logo" />
          </div>
          <% } %>
        </div>

        <div class="app_middle_bar force_mobile">
          <ul>
            <li
              class="<%= (path == '/home') ? 'active' : 'mdb_item' %>"
              onclick="toPreHome('<%= path %>')"
            >
              <img src="/public/images/icons/home-icon.svg" alt="Icon" />
            </li>

            <li
              class="<%= (path == '/contests') ? 'active' : '' %>"
              onclick="toMyPreContests('<%= path %>')"
            >
              <img src="/public/images/icons/contest-icon.svg" alt="Icon" />
            </li>
          </ul>
        </div>

        <div class="app_right_menu">
          <div class="profile">
            <div class="head hphead">
              <img
                class="icon"
                src="/public/images/icons/user-icon-light.svg"
                alt="Icon"
              />
              <img
                src="/public/images/singer.png"
                alt="avatar"
                class="avatar"
              />
            </div>
            <div class="drop_down hpdd">
              <div class="_profile">
                <img src="/public/images/singer.png" alt="avatar" />
                <div class="name">
                  <span>Nathan Steve</span>
                  <img
                    class="app_v_badge"
                    src="/public/images/icons/verified-badge.svg"
                    alt="Verified"
                  />
                </div>
                <div class="uname" id="username">@nathan_steve</div>
              </div>

              <div class="_menu">
                <ul>
                  <li>
                    <a href="javascript:void(0)" onclick="logoutAppUser();">
                      <img src="/public/images/icons/log-off.svg" alt="Icon" />
                      <span>Logout</span>
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </nav>
    </header>

    <main class="app_layout app_wrapper">
      <!-- main body of the app -->
      <div class="app_main">
        <% if(isParticipated) { %>
        <div class="myContestCard mt-3 mb-3 shadow">
          <div class="flex-title">
            <span><%- contestDetailsData.result.title %></span>
            <div class="status active">Active</div>
          </div>
          <div class="text white">
            Ends in <%- contestDetailsData.result.endDays %> days
          </div>
          <div class="text primary mt-2">Your submission</div>
          <div class="contestant">
            <div class="head">
              <video
                controls
                class="video-js"
                preload="auto"
                width="640"
                height="264"
                data-setup="{}"
              >
                <source
                  src="<%- participatedParticipantData.media %>"
                  type="video/mp4"
                />
                <source
                  src="<%- participatedParticipantData.media %>"
                  type="video/webm"
                />
                <p class="vjs-no-js">
                  To view this video please enable JavaScript, and consider
                  upgrading to a web browser that
                  <a
                    href="https://videojs.com/html5-video-support/"
                    target="_blank"
                    >supports HTML5 video</a
                  >
                </p>
              </video>
            </div>
            <div class="body">
              <!-- inactive | active | review -->
              <div class="postStatus active">Active</div>
              <div class="votes">
                <div class="count">
                  <strong>Votes:</strong>
                  <span><%- participatedParticipantData.votes.length %></span>
                </div>
                <div class="rank">
                  <strong>Current Rank:</strong>
                  <span><%- participatedParticipantData.rank %> </span>
                </div>
              </div>

              <div class="cta">
                <button
                  class="btn btn-outlined"
                  onclick="confirmDelete('<%- contestDetailsData.result._id %>')"
                >
                  Withdraw
                </button>
                <button
                  class="btn btn-outlined d-none"
                  data-toggle="_modal"
                  data-target="shareModal"
                >
                  Share
                </button>
                <button
                  class="btn btn-primary"
                  type="button"
                  onclick="toPreHome('<%= path %>')"
                >
                  Visit contest
                </button>
              </div>
            </div>
          </div>
        </div>
        <% } else { %>
        <div class="title mb-3">Enter the Vibrer Singing Contest Now!</div>

        <div class="app_form_container shadow">
          <div class="sub mb-1">Submit Your Entry</div>
          <div class="text white mb-2">
            Enter the title of your song, upload your video, and make sure to
            read the
            <span
              class="toggle primary"
              data-toggle="_modal"
              data-target="contest1tandc"
            >
              Terms and Conditions</span
            >
            before submitting.
          </div>

          <form
            class="form fborder"
            action="javascript:void(0)"
            method="POST"
            id="mediaPostForm"
            autocomplete="off"
            enctype="multipart/form-data"
          >
            <div class="mb-3">
              <input
                type="hidden"
                name="contest_id"
                value="<%- contestDetailsData.result._id %>"
                autocomplete="off"
              />
            </div>
            <div class="mb-3">
              <input
                class="form-input"
                type="text"
                placeholder="Entry video title"
                name="title"
                id="title"
              />
            </div>
            <div class="mb-3">
              <input
                class="form-input"
                type="file"
                name="media_video"
                id="media_file"
              />
              <div id="uploadProgress" class="progress-bar d-none">
                <div class="progress-bar-fill"></div>
              </div>
            </div>

            <div class="sub pr-title d-none">Your video preview</div>
            <div class="video-preview d-none">
              <video
                controls
                class="video-js"
                preload="auto"
                width="640"
                height="264"
                data-setup="{}"
              >
                <!-- <source src="/uploads/inescapable.mp4" type="video/mp4" />
              <source src="/uploads/inescapable.mp4" type="video/webm" /> -->
                <p class="vjs-no-js">
                  To view this video please enable JavaScript, and consider
                  upgrading to a web browser that
                  <a
                    href="https://videojs.com/html5-video-support/"
                    target="_blank"
                    >supports HTML5 video</a
                  >
                </p>
              </video>
            </div>

            <div class="custom-select-wrapper mb-3">
              <div class="custom-check-select dfac" id="genre">
                <div class="placeholder">Genre *</div>
                <div class="check-options">
                  <div class="check-list cs-scroll grid-2-sm">
                    <% if (genreData && genreData.length > 0) {
                    genreData.forEach(genre => { %>
                    <label class="checkbox-container">
                      <%= genre.name %>
                      <input
                        type="checkbox"
                        value="<%= genre._id %>"
                        data-value="<%= genre.name %>"
                      />
                      <span class="checkmark"></span>
                    </label>
                    <% }); } %>
                  </div>
                  <div class="mb-3">
                    <input
                      type="hidden"
                      id="genres"
                      name="genres"
                      value=""
                      autocomplete="off"
                    />
                  </div>
                  <div class="divider w-100 mt-4"></div>
                  <div class="ccs-foter dfjcfe">
                    <button
                      type="button"
                      class="btn btn-primary h-auto close-options"
                    >
                      Done
                    </button>
                  </div>
                </div>
              </div>
              <div class="selected-items"></div>
            </div>

            <div class="mb-4">
              <div id="desc" style="height: auto; min-height: 100px"></div>
            </div>
            <div class="error-message mt-3 d-none"></div>
            <div class="success-message mt-3 d-none">
              Your have posted as participate successfully.
            </div>
            <div class="mb-3">
              <button class="btn btn-primary submitBtn" type="submit">
                Submit
              </button>
            </div>
          </form>
        </div>
        <% } %>
      </div>
    </main>

    <%- include('../modals/contest1tandc'); %>
    <!-- javascript -->
    <script src="/public/js/redirections.js"></script>
    <script src="/public/js/general.js"></script>
    <script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <script src="https://vjs.zencdn.net/7.20.3/video.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/videojs-youtube/2.6.1/Youtube.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/public/js/_modal.js"></script>
    <script src="/public/js/check-select.js"></script>
    <script src="/public/js/config.js"></script>
    <script>
      var players = [];

      var videoElements = document.querySelectorAll(".video-js");

      for (var i = 0; i < videoElements.length; i++) {
        var player = videojs(videoElements[i]);

        // Store the player instance in the array
        players.push(player);

        // Add event listener to each player
        player.on("play", function () {
          pauseOtherPlayers(this);
        });
        player.on("seeking", function () {
          player.muted(true);
        });

        player.on("seeked", function () {
          player.muted(false);
        });
      }
      function pauseVideo() {
        player.pause();
      }
      // Function to pause all players except the currently playing one
      function pauseOtherPlayers(currentPlayer) {
        players.forEach(function (player) {
          if (player !== currentPlayer) {
            player.pause();
          }
        });
      }
      var quill = new Quill("#desc", {
        modules: {
          toolbar: false,
        },
        placeholder: "Description (optional)", //
        theme: "snow",
      });
    </script>
    <script>
      document
        .getElementById("media_file")
        .addEventListener("change", function (event) {
          // Display the progress bar
          var fileInput = event.target;
          var files = fileInput.files;

          var progressBar = document.getElementById("uploadProgress");
          var progressBarFill = progressBar.querySelector(".progress-bar-fill");
          progressBar.classList.remove("d-none");

          // Simulate file upload progress
          var uploadPercentage = 0;
          var simulateUpload = setInterval(function () {
            if (uploadPercentage >= 100) {
              clearInterval(simulateUpload);

              // Hide the progress bar
              progressBar.classList.add("d-none");

              // Update the video source and display it
              var videoElement = document.querySelector(".video-preview video");
              var videoSource = videoElement.getElementsByTagName("source");
              if (files.length > 0) {
                var file = files[0];

                var reader = new FileReader();
                reader.onload = function (e) {
                  if (file.type === "video/mp4") {
                    videoElement.innerHTML +=
                      '<source src="' + e.target.result + '" type="video/mp4">';
                  } else if (file.type === "video/webm") {
                    videoElement.innerHTML +=
                      '<source src="' +
                      e.target.result +
                      '" type="video/webm">';
                  }
                };

                // Read the file as data URL
                reader.readAsDataURL(file);

                // videoSource[0].src = "/uploads/your-uploaded-video.mp4"; // Static URL for demonstration
                // videoSource[1].src = "/uploads/your-uploaded-video.webm"; // Static URL for demonstration
                videoElement.load();
                videoElement.addEventListener("canplay", function () {
                  videoElement.play();
                });
                videoElement.autoplay = true;
                videoElement.controls = true;
              }

              // Display the video player and title
              document
                .querySelector(".video-preview")
                .classList.remove("d-none");
              document.querySelector(".pr-title").classList.remove("d-none");
            } else {
              uploadPercentage += 5; // Incrementing the percentage by 5
              progressBarFill.style.width = uploadPercentage + "%";
              progressBarFill.textContent = uploadPercentage + "%";
            }
          }, 200); // Adjust the interval time as needed
        });

      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("mediaPostForm");
        const btn = document.querySelector(".submitBtn");
        const successPop = document.querySelector(".success-message");
        const errorPop = document.querySelector(".error-message");

        // Disable HTML5 validation
        form.setAttribute("novalidate", "");

        form.addEventListener("submit", async function (e) {
          e.preventDefault();

          // Change button text to "Submitting..."
          btn.textContent = "Submitting...";

          // Implement the timeout function
          setTimeout(async () => {
            let isValid = true;
            let customErrors = {};

            const formData = new FormData(form);
            formData.append("description", quill.getText());

            const media_video = document.getElementById("media_file").files[0];

            if (!media_video) {
              isValid = false;
              customErrors.media_video = "Please choose a video file";
            } else if (!isValidVideoFile(media_video)) {
              isValid = false;
              customErrors.media_video =
                "Please choose a valid video file (MP4 or WebM)";
            }

            const genresInput = document.querySelector('[name="genres"]');
            const genresArray = genresInput.value;
            formData.append("genres", genresArray);

            // Clear previous error alerts
            const prevAlerts = document.querySelectorAll(".form-alert");
            prevAlerts.forEach((alert) => alert.remove());

            if (isValid) {
              // You can add your form submission logic here
              const url = `${API_URL}add/MediaPost`;
              try {
                const response = await fetch(url, {
                  method: "POST",
                  headers: {
                    Authorization: `Bearer ${localStorage.getItem(
                      "appUserToken"
                    )}`,
                  },
                  body: formData,
                });

                const responseData = await response.json();
                if (response.status === 201 || response.status === 200) {
                  if (responseData.status === 1) {
                    // Handle success
                    successPop.style.display = "block";
                    successPop.innerHTML = responseData.message;
                    setTimeout(() => {
                      successPop.style.display = "none";
                      window.location.href = window.location.href;
                    }, 5000);
                    form.reset();
                  } else {
                    // Handle API response with an error status
                    errorPop.style.display = "block";
                    if (responseData.error) {
                      responseData.message = responseData.error;
                    }
                    errorPop.innerHTML = responseData.message;
                    setTimeout(() => {
                      errorPop.style.display = "none";
                    }, 5000);
                  }
                } else {
                  // Handle HTTP error
                  errorPop.style.display = "block";
                  if (responseData.error) {
                    responseData.message = responseData.error;
                  }
                  errorPop.innerHTML = responseData.message;
                  setTimeout(() => {
                    errorPop.style.display = "none";
                  }, 5000);
                }
              } catch (err) {
                // Handle fetch error
                console.error("An error occurred", err);
                errorPop.style.display = "block";
                errorPop.innerHTML =
                  "An error occurred while submitting the form.";
                setTimeout(() => {
                  errorPop.style.display = "none";
                }, 5000);
              }
            } else {
              for (const key in customErrors) {
                const inputElement = form.querySelector(`[name="${key}"]`);
                const alertDiv = document.createElement("div");
                alertDiv.className = "form-alert error";
                alertDiv.textContent = customErrors[key];
                inputElement.parentNode.insertBefore(
                  alertDiv,
                  inputElement.nextSibling
                );
              }
            }

            // Reset the button text
            btn.textContent = "Submit";
          }, 1000); // 1-second delay
        });

        function isValidVideoFile(file) {
          const allowedTypes = ["video/mp4", "video/webm"];
          return allowedTypes.includes(file.type);
        }
      });
    </script>

    <script>
      async function confirmDelete(postId) {
        try {
          const result = await Swal.fire({
            title: "Are you sure?",
            text: "Do you want to withdraw from this contest? You'll lose your votes, and you won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#fb6580",
            cancelButtonColor: "#4b5891",
            confirmButtonText: "Yes, delete it!",
          });

          if (result.isConfirmed) {
            const response = await fetch(
              `${API_URL}remove/MediaPost/${postId}`,
              {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${localStorage.getItem(
                    "appUserToken"
                  )}`,
                },
              }
            );

            if (response.ok) {
              await Swal.fire(
                "Deleted!",
                "Your post has been deleted.",
                "success"
              );
              // Refresh page or update UI accordingly
              window.location.reload();
            } else {
              await Swal.fire("Error!", "Something went wrong.", "error");
            }
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error!", "Something went wrong.", "error");
        }
      }
    </script>
    <script>
      async function logoutAppUser() {
        try {
          // Clear token from localStorage
          localStorage.removeItem("appUserToken");

          // Clear token from server session
          await fetch("/clear-token-in-session", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            // You might need to send the token to the server for verification
            // Add it to the body if required
            body: JSON.stringify({
              // token: getStoredTokenFromLocalStorage(),
            }),
          });

          // Redirect to the logout page or any other desired action
          window.location.href = "/login";
        } catch (error) {
          console.error("Error during logout:", error);
          // Handle the error as needed
        }
      }
    </script>
  </body>
</html>
